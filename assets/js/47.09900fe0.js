(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{278:function(e,s,t){"use strict";t.r(s);var a=t(2),n=Object(a.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"introduction"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[e._v("#")]),e._v(" Introduction")]),e._v(" "),t("p",[e._v("First of all, you must have your machine setup for development.")]),e._v(" "),t("p",[e._v("If you're not on macOS, skip everything below and use "),t("a",{attrs:{href:"https://laravel.com/docs/8.x/homestead",target:"_blank",rel:"noopener noreferrer"}},[e._v("Laravel Homestead"),t("OutboundLink")],1),e._v(" - it's not as nice, but it's your only option. Sorry about that, but there's a reason we use macs.")]),e._v(" "),t("h2",{attrs:{id:"local-development-environment"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#local-development-environment"}},[e._v("#")]),e._v(" Local development environment")]),e._v(" "),t("h3",{attrs:{id:"homebrew"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#homebrew"}},[e._v("#")]),e._v(" Homebrew")]),e._v(" "),t("p",[e._v("If you haven't installed "),t("a",{attrs:{href:"https://brew.sh/",target:"_blank",rel:"noopener noreferrer"}},[e._v("homebrew"),t("OutboundLink")],1),e._v(" then let's do it right now.")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("/bin/bash -c "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh"),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v('"')]),e._v("\n")])])]),t("p",[e._v("Once that's done, we'll install a few essential dependencies. This is done in multiple steps, as homebrew hard fails - should something go wrong.")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("brew "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" coreutils "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("wget")]),e._v(" jq redis\n")])])]),t("p",[t("em",[e._v("The redis server will not start at boot, but you'll find the redis-cli handy")])]),e._v(" "),t("p",[e._v("Then we'll install php & composer")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("brew "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" php "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("composer")]),e._v("\n")])])]),t("h4",{attrs:{id:"php-extensions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#php-extensions"}},[e._v("#")]),e._v(" PHP Extensions")]),e._v(" "),t("p",[e._v("We need a few php extensions installed. To do that, we'll use "),t("code",[e._v("pecl")]),e._v(".")]),e._v(" "),t("p",[e._v("First up, igbinary - a dependency of the redis extension:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("pecl "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" igbinary\n")])])]),t("p",[e._v("Now the redis extension")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("pecl "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" redis\n")])])]),t("p",[e._v("You could stop here, but i'd really recommend installing the xdebug extension, it's just as easy, and will help you "),t("strong",[e._v("A LOT")]),e._v(" "),t("em",[e._v("and it's kinda required for codecoverage in phpunit")])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("pecl "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" xdebug\n")])])]),t("h3",{attrs:{id:"nvm-node-version-manager"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nvm-node-version-manager"}},[e._v("#")]),e._v(" nvm (Node Version Manager)")]),e._v(" "),t("p",[e._v("Now we'll install "),t("a",{attrs:{href:"https://github.com/nvm-sh/nvm/blob/master/README.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("nvm"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("Once that's done, and you get output similar to this:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('$ nvm\n\nNode Version Manager (v0.36.0)\n\nNote: <version> refers to any version-like string nvm understands. This includes:\n  - full or partial version numbers, starting with an optional "v" (0.10, v0.1.2, v1)\n  - default (built-in) aliases: node, stable, unstable, iojs, system\n  - custom aliases you define with `nvm alias foo`\n\n Any options that produce colorized output should respect the `--no-colors` option.\n\nUsage:\n  nvm --help                                  Show this message\n  nvm --version                               Print out the installed version of nvm\n  nvm install [-s] [<version>]                Download and install a <version>, [-s] from source. Uses .nvmrc if available\n    --reinstall-packages-from=<version>       When installing, reinstall packages installed in <node|iojs|node version number>\n    --lts                                     When installing, only select from LTS (long-term support) versions\n    --lts=<LTS name>                          When installing, only select from versions for a specific LTS line\n    --skip-default-packages                   When installing, skip the default-packages file if it exists\n    --latest-npm                              After installing, attempt to upgrade to the latest working npm on the given node version\n    --no-progress                             Disable the progress bar on any downloads\n    --alias=<name>                            After installing, set the alias specified to the version specified. (same as: nvm alias <name> <version>)\n    --default\n....\n')])])]),t("p",[e._v("We'll install the latest LTS release of node")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("nvm "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" --lts --with-latest-npm\n")])])]),t("h4",{attrs:{id:"yarn"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#yarn"}},[e._v("#")]),e._v(" Yarn")]),e._v(" "),t("p",[e._v("This project does not use "),t("code",[e._v("npm")]),e._v(" but instead uses "),t("code",[e._v("yarn")]),e._v(" for javascript package management. So let's get it installed:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" i -g "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("yarn")]),e._v("\n")])])]),t("p",[e._v("Easy, right? ðŸ˜›")]),e._v(" "),t("h3",{attrs:{id:"docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[e._v("#")]),e._v(" Docker")]),e._v(" "),t("p",[e._v("You need Docker Desktop for mac. "),t("a",{attrs:{href:"https://docs.docker.com/docker-for-mac/install/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Follow their install instructions"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("Once you've got it installed, go to the laravel valet section of this guide.")])])}),[],!1,null,null,null);s.default=n.exports}}]);